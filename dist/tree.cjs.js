"use strict";function Tree(n){if(!(this instanceof Tree))return new Tree(n);var i="key"in(n=r(n))?t(n.key):null,u="parent"in n?t(n.parent):null,o="children"in n?e(n.children,i):e(),s=["bigint","boolean","number","string","symbol"],c=["key","parent","children","size"];this.key=i,this.parent=u,this.children=o.value,this.size=null!==i||null!==u||o.length>0?1+o.size:0,Object.keys(n).forEach((function(e){var t=n[e];c.indexOf(e)>-1||(s.indexOf(typeof t)>-1||null===t)&&(this[e]=t)}),this),Object.freeze(this),Object.freeze(Object.getPrototypeOf(this))}function e(t,r){if(!(this instanceof e))return new e(t,r);t instanceof e?t=t.value:Array.isArray(t)||(t=[]);var i=0;this.value=t.reduce((function(e,t){return t instanceof Tree&&(t=void 0!==r&&r!==t.parent?n(t,{parent:r}):t,e.push(t),i+=t.size),e}),[]),this.size=i,this.length=this.value.length}function t(e){return"string"==typeof e||"number"==typeof e&&e===Number(e)&&e!==1/0&&e!==-1/0?e:null}function r(e){return"object"==typeof e&&null!==e?e:Object.create(null)}function n(e,t){t=r(t);var n={children:e.children,key:e.key,parent:e.parent};return Object.keys(e).forEach((function(t){n[t]=e[t]}),e),Object.keys(t).forEach((function(e){n[e]=t[e]})),Tree(n)}Object.defineProperty(exports,"__esModule",{value:!0}),Tree.prototype.add=function(t){if(!(t instanceof Tree)||t.isEmpty())return this;var r,i=this.delete(t.key),u=this.get(t.parent);for(null===u&&(u=this);u;)(r=e(u.children).toMap())[t.key]=t,t=n(u,{children:r=Object.keys(r).reduce((function(e,t){return e.push(r[t]),e}),[])}),u=i.get(t.parent);return t},Tree.prototype.delete=function(e){var t,r,i,u;if(e===this.key)return new this.constructor;if(null===(i=this.get(e)))return this;for(u=this.get(i.parent);u&&(t=u.children.reduce((function(t,r){return i.key!==e&&i.key===r.key?t.push(i):r.key!==e&&t.push(r),t}),[]),i=n(u,{children:t}),null!==(r=this.get(i.parent))&&r.key!==u.key);)u=r;return i},Tree.prototype.forEach=function(e,t){if(!e.call(t,this,this.key))for(var r=0;r<this.children.length;r++)this.children[r].forEach(e,t)},Tree.prototype.get=function(e){var t=null;return this.forEach((function(r){return r.key===e&&(t=r,!0)})),t},Tree.prototype.isEmpty=function(){return 0===this.size&&4===Object.keys(this).length},Tree.prototype.sort=function(t){(t=r(t)).deep=!("deep"in t&&!t.deep);var i=e(this.children),u=i.sort(t.comparator);return t.deep&&(u=u.reduce((function(e,r){return e.push(r.sort(t)),e}),[])),i.equals(u)?this:n(this,{children:u})},Tree.fromArray=function(t,n){t=Array.isArray(t)?t:[],(n=r(n)).height="height"in n?n.height:0,n.comparator="comparator"in n?n.comparator:void 0;var i=e(t).assemble(n.height,n.comparator);return 1===i.length?i.value[0]:Tree({children:i})},Object.freeze(Tree),e.prototype.assemble=function(t,n){var i=[],u=this.flatten().sort((function(e,t){return null===e.parent||null===t.parent?-1:t.parent-e.parent})),o=e(u).toMap();return Object.keys(u).forEach((function(e){var n=u[e].key,i=o[n],s=function(e,t,n){e=r(e);var i=[],u=e.parent,o=n-1;if(o<1)return[u];for(;t[u];)i.push(u),u=t[u].parent;if(i.length>o)return i.reduce((function(e,t,r){return r>=i.length-o&&e.push(t),e}),[]);return i}(i,o,t);void 0!==o[s[0]]&&(o[s[0]]=o[s[0]].add(i),delete o[i.key])})),Object.keys(o).forEach((function(e){i.push(o[e])})),new e(i)},e.prototype.flatten=function(){var e=[];return this.value.forEach((function(t){1===t.size?e.push(t):t.forEach((function(t){1===t.size?e.push(t):e.push(n(t,{children:[]}))}))})),e},e.prototype.forEach=function(e,t){return this.value.forEach(e,t)},e.prototype.get=function(e){return this.value[e]},e.prototype.sort=function(t){var r;return"function"!=typeof t&&(t=function(e,t){return e.key<t.key?-1:e.key>t.key?1:0}),this.length<2?this:(r=e(this.value.concat().sort(t)),this.equals(r)?this:r)},e.prototype.reduce=function(t,r){return e(this.value.reduce(t,r))},e.prototype.equals=function(t,n){if(n=r(n),!(t instanceof e)||this.length!==t.length||this.size!==t.size)return!1;var i;switch(n.mode){case"lenient":for(i=0;i<this.value.length;i++)if(-1===t.value.indexOf(this.value[i]))return!1;break;case"strict":default:for(i=0;i<this.value.length;i++)if(this.value[i]!==t.value[i])return!1}return!0},e.prototype.toMap=function(){return this.value.reduce((function(e,t){if(void 0!==e[t.key]){if(t.isEmpty())return e;throw new TypeError("Duplicate tree.")}return e[t.key]=t,e}),Object.create(null))},exports.Tree=Tree;
